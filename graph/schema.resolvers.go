package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/yaninyzwitty/graphql-ggqlen-go-proj/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// Generate a valid UUID for the todo ID
	todoID := uuid.New()

	// Parse and validate the user-provided userID (should be a valid UUID)
	userID, err := uuid.Parse(input.UserID)
	if err != nil {
		return nil, fmt.Errorf("invalid input syntax for type uuid: %w", err)
	}

	// Check if the user exists
	var exists bool
	checkUserQuery := `SELECT EXISTS(SELECT 1 FROM users WHERE id = $1)`
	err = r.DB.QueryRowContext(ctx, checkUserQuery, userID).Scan(&exists)
	if err != nil {
		return nil, fmt.Errorf("failed to check user existence: %w", err)
	}

	if !exists {
		return nil, fmt.Errorf("user with id %s does not exist", input.UserID)
	}

	// Insert the new todo into the database
	query := `
        INSERT INTO todos (id, text, done, user_id)
        VALUES ($1, $2, $3, $4)
        RETURNING id, text, done, user_id;
    `

	todo := &model.Todo{}
	err = r.DB.QueryRowContext(ctx, query, todoID, input.Text, false, userID).Scan(
		&todo.ID, &todo.Text, &todo.Done, &todo.UserID,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to create todo: %w", err)
	}

	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	query := `SELECT id, text, done, user_id FROM todos`
	rows, err := r.DB.QueryContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch todos: %v", err)
	}
	defer rows.Close()

	// Create a slice to hold the todos
	var todos []*model.Todo
	// Iterate through the rows and populate the todos slice
	for rows.Next() {
		var todo model.Todo
		if err := rows.Scan(&todo.ID, &todo.Text, &todo.Done, &todo.UserID); err != nil {
			return nil, fmt.Errorf("failed to scan todo: %v", err)
		}
		todos = append(todos, &todo)
	}

	// Return the list of todos
	return todos, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	query := `SELECT id, name FROM users WHERE id = $1`

	row := r.DB.QueryRowContext(ctx, query, obj.UserID)
	var user model.User
	err := row.Scan(&user.ID, &user.Name)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch user: %v", err)

	}
	return &user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
